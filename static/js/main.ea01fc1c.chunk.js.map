{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["Movie","year","title","summary","poster","genres","className","src","alt","map","item","index","key","slice","App","state","isLoding","movies","getMovieData","a","axios","get","data","console","log","setState","this","movie","id","medium_cover_image","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uTAoCeA,G,MA/BD,SAAC,GAAwC,IAAvCC,EAAsC,EAAtCA,KAAKC,EAAiC,EAAjCA,MAAMC,EAA2B,EAA3BA,QAAQC,EAAmB,EAAnBA,OAAOC,EAAY,EAAZA,OACtC,OACA,yBAAKC,UAAW,SACZ,yBAAKC,IAAKH,EAAQI,IAAON,EAAOA,MAASA,IAEzC,yBAAKI,UAAU,gBACX,wBAAIA,UAAU,gBAAd,IAA+BJ,GAC/B,wBAAII,UAAU,eAAd,IAA8BL,GAC9B,wBAAIK,UAAU,iBAERD,EAAOI,KAAK,SAACC,EAAKC,GAAN,OAAe,wBAAIC,IAAKD,EAAOL,UAAU,gBAA1B,IAA2CI,EAA3C,SAGjC,uBAAGJ,UAAU,iBAAb,IAA+BH,EAAQU,MAAM,EAAE,KAA/C,WCiDGC,G,iNA3DbC,MAAQ,CACNC,UAAU,EACVC,OAAO,I,EAITC,a,sBAAe,8BAAAC,EAAA,sEACuBC,IAAMC,IAAI,4DADjC,gBACMJ,EADN,EACNK,KAAMA,KAAML,OACnBM,QAAQC,IAAIP,GACZ,EAAKQ,SAAS,CAACR,SAAOD,UAAS,IAHlB,2C,6LAObU,KAAKR,e,qIAMLK,QAAQC,IAAI,UADN,MAEoBE,KAAKX,MAAxBC,EAFD,EAECA,SAASC,EAFV,EAEUA,OAChB,OACI,6BAASX,UAAU,aAChBU,EACC,yBAAKV,UAAW,UAChB,0BAAMA,UAAU,eAAhB,cAIA,yBAAKA,UAAW,UAEdW,EAAOR,KAAI,SAAAkB,GAAK,OACf,kBAAC,EAAD,CACGf,IAAMe,EAAMC,GACZA,GAAID,EAAMC,GACV3B,KAAM0B,EAAM1B,KACZC,MAAOyB,EAAMzB,MACbC,QAASwB,EAAMxB,QACfC,OAAUuB,EAAME,mBAChBxB,OAAUsB,EAAMtB,kB,GAxChByB,IAAMC,YCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzB,QAAQyB,MAAMA,EAAMC,c","file":"static/js/main.ea01fc1c.chunk.js","sourcesContent":["import React from 'react';\nimport PropsType from 'prop-types'\nimport \"./Movie.css\"\n\n\nconst Movie = ({year,title,summary,poster,genres}) => {\n    return (\n    <div className =\"movie\">\n        <img src={poster} alt = {title} title = {title} />\n        \n        <div className=\"movies__data\">   \n            <h3 className=\"movie__title\"> {title}</h3>\n            <h4 className=\"movie__year\"> {year}</h4>\n            <ul className=\"movie__genres\">\n                {\n                  genres.map( (item,index)=> <li key={index} className=\"geners_gener\"> {item} </li>)  \n                }\n            </ul>\n            <p className=\"movie_summary\"> {summary.slice(0,140)}...</p>\n\n\n        </div>\n    </div>\n    )\n}\n    \n\nMovie.propTypes = {\n    id : PropsType.number.isRequired,\n    year : PropsType.number.isRequired,\n    title : PropsType.string.isRequired,\n    summary : PropsType.string.isRequired,\n    poster : PropsType.string.isRequired,\n    genres: PropsType.arrayOf(PropsType.string).isRequired\n}\n\nexport default Movie;","import React from 'react';\nimport axios from \"axios\";\nimport Movie from \"./Movie\";\nimport \"./App.css\"\n\n\n\nclass App extends React.Component {\n  state = {\n    isLoding: true, // 마운트 되자마자 로딩됨\n    movies:[]\n  };\n  /* compnet가 마운트 된후 호출된후 재 Rander 수행 */\n\n  getMovieData = async () => {\n    const {data:{data:{movies}}}= await axios.get(\"https://yts-proxy.now.sh/list_movies.json?sort_by=rating\") // 데이터 API 가져오는 함수\n    console.log(movies);\n    this.setState({movies,isLoding:false})\n  }\n  async componentDidMount(){\n   \n    this.getMovieData();  //로딩이후 데이터 만듬\n\n    \n  }\n\n  render(){\n    console.log(\"render\")\n    const {isLoding,movies} = this.state\n    return (\n        <section className=\"container\"> \n          {isLoding \n          ? <div className =\"loader\">\n            <span className=\"loader_text\">Loading..</span>\n\n          </div> \n          :(\n            <div className =\"movies\">\n              {\n              movies.map(movie => \n               <Movie \n                  key ={movie.id}\n                  id={movie.id}\n                  year={movie.year}\n                  title={movie.title}\n                  summary={movie.summary}\n                  poster = {movie.medium_cover_image} \n                  genres = {movie.genres}\n                  />\n              )\n          }\n\n\n\n            </div>\n\n          ) \n          \n      \n      }\n      </section>\n    );\n  }\n  \n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}